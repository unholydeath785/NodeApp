(function() {
  var ChildProcess, _, asar, consoleLogger, convertVersion, jetpack, nullLogger, temp,
    slice = [].slice;

  ChildProcess = require('child_process');

  asar = require('asar');

  temp = require('temp');

  _ = require('underscore');

  jetpack = require('fs-jetpack');

  temp.track();

  consoleLogger = {
    error: function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return console.error.apply(console, args);
    },
    warn: function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return console.warn.apply(console, args);
    },
    info: function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return console.info.apply(console, args);
    },
    debug: function() {}
  };

  nullLogger = {
    error: function() {},
    warn: function() {},
    info: function() {},
    debug: function() {}
  };

  module.exports.build = function(config, done) {
    var appDirectory, appMetadata, appResourcesDirectory, args, asarFile, certificateFile, certificatePassword, cmd, error, exec, loadingGif, locateExecutableInPath, log, metadata, monoExe, nugetOutput, nuspecContent, outputDirectory, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, remoteReleases, resourcesDirectory, signWithParams, syncReleases, targetNuspecPath, template, useMono, vendorDirectory, wineExe;
    if (config.log === false) {
      log = nullLogger;
    } else {
      log = (ref = config.log) != null ? ref : consoleLogger;
    }
    error = function(msg) {
      log.error(msg);
      return done(new Error(msg));
    };
    exec = function(options, callback) {
      return ChildProcess.execFile(options.cmd, options.args, function(error, stdout, stderr) {
        if (stderr) {
          log.error(stderr);
        }
        return callback(error);
      });
    };
    locateExecutableInPath = function(name) {
      var haystack;
      haystack = _.map(process.env.PATH.split(/[:;]/), function(x) {
        return jetpack.path(x, name);
      });
      return _.find(haystack, function(needle) {
        return jetpack.exists(needle);
      });
    };
    if (!config.appDirectory) {
      return error('appDirectory is required configuration');
    }
    useMono = false;
    ref1 = _.map(['mono', 'wine'], locateExecutableInPath), monoExe = ref1[0], wineExe = ref1[1];
    if (process.platform !== 'win32') {
      useMono = true;
      if (!(wineExe && monoExe)) {
        return error("You must install both Mono and Wine on non-Windows");
      }
      log.debug("Using Mono: '" + monoExe + "'");
      log.debug("Using Wine: '" + wineExe + "'");
    }
    appDirectory = jetpack.cwd(config.appDirectory);
    vendorDirectory = jetpack.cwd(__dirname, 'vendor');
    resourcesDirectory = jetpack.cwd(__dirname, 'resources');
    vendorDirectory.copy('Update.exe', appDirectory.path('Update.exe'));
    outputDirectory = (ref2 = config.outputDirectory) != null ? ref2 : 'installer';
    outputDirectory = jetpack.cwd(outputDirectory);
    loadingGif = (ref3 = config.loadingGif) != null ? ref3 : resourcesDirectory.path('install-spinner.gif');
    loadingGif = jetpack.path(loadingGif);
    certificateFile = config.certificateFile, certificatePassword = config.certificatePassword, remoteReleases = config.remoteReleases, signWithParams = config.signWithParams;
    asarFile = appDirectory.path('resources', 'app.asar');
    if (jetpack.exists(asarFile)) {
      appMetadata = JSON.parse(asar.extractFile(asarFile, 'package.json'));
    } else {
      appResourcesDirectory = appDirectory.cwd('resources', 'app');
      appMetadata = appResourcesDirectory.read(appResourcesDirectory.path('package.json'), 'json');
    }
    metadata = _.extend({}, appMetadata, config);
    if (metadata.authors == null) {
      metadata.authors = (ref4 = (ref5 = (ref6 = metadata.author) != null ? ref6.name : void 0) != null ? ref5 : metadata.author) != null ? ref4 : '';
    }
    if (metadata.description == null) {
      metadata.description = '';
    }
    if (metadata.exe == null) {
      metadata.exe = metadata.name + ".exe";
    }
    if (metadata.iconUrl == null) {
      metadata.iconUrl = 'https://raw.githubusercontent.com/atom/electron/master/atom/browser/resources/win/atom.ico';
    }
    if (metadata.owners == null) {
      metadata.owners = metadata.authors;
    }
    if (metadata.title == null) {
      metadata.title = (ref7 = metadata.productName) != null ? ref7 : metadata.name;
    }
    metadata.version = convertVersion(metadata.version);
    if (metadata.copyright == null) {
      metadata.copyright = "Copyright Â© " + (new Date().getFullYear()) + " " + ((ref8 = metadata.authors) != null ? ref8 : metadata.owners);
    }
    template = _.template(jetpack.read(jetpack.path(__dirname, 'template.nuspec')));
    nuspecContent = template(metadata);
    nugetOutput = temp.mkdirSync('si');
    targetNuspecPath = jetpack.path(nugetOutput, metadata.name + ".nuspec");
    jetpack.write(targetNuspecPath, nuspecContent);
    cmd = vendorDirectory.path('nuget.exe');
    args = ['pack', targetNuspecPath, '-BasePath', appDirectory.path(), '-OutputDirectory', nugetOutput, '-NoDefaultExcludes'];
    if (useMono) {
      args.unshift(cmd);
      cmd = monoExe;
    }
    syncReleases = function(cb) {
      if (remoteReleases != null) {
        cmd = vendorDirectory.path('SyncReleases.exe');
        args = ['-u', remoteReleases, '-r', outputDirectory.path()];
        if (useMono) {
          args.unshift(cmd);
          cmd = monoExe;
        }
        return exec({
          cmd: cmd,
          args: args
        }, cb);
      } else {
        return process.nextTick(function() {
          return cb();
        });
      }
    };
    return exec({
      cmd: cmd,
      args: args
    }, function(error) {
      var nupkgPath;
      if (error != null) {
        return done(error);
      }
      nupkgPath = jetpack.path(nugetOutput, metadata.name + "." + metadata.version + ".nupkg");
      return syncReleases(function(error) {
        var setupIconPath;
        if (error != null) {
          return done(error);
        }
        cmd = vendorDirectory.path('Update.com');
        args = ['--releasify', nupkgPath, '--releaseDir', outputDirectory.path(), '--loadingGif', loadingGif];
        if (useMono) {
          args.unshift(vendorDirectory.path('Update-Mono.exe'));
          cmd = monoExe;
        }
        if (signWithParams != null) {
          args.push('--signWithParams');
          args.push(signWithParams);
        } else if ((certificateFile != null) && (certificatePassword != null)) {
          args.push('--signWithParams');
          args.push("/a /f \"" + (jetpack.path(certificateFile)) + "\" /p \"" + certificatePassword + "\"");
        }
        if (config.setupIcon) {
          setupIconPath = jetpack.path(config.setupIcon);
          args.push('--setupIcon');
          args.push(setupIconPath);
        }
        if (config.noMsi) {
          args.push('--no-msi');
        }
        return exec({
          cmd: cmd,
          args: args
        }, function(error) {
          if (error != null) {
            return done(error);
          }
          if (metadata.productName) {
            outputDirectory.rename('Setup.exe', metadata.productName + "Setup.exe");
            if (outputDirectory.exists('Setup.msi')) {
              outputDirectory.rename('Setup.msi', metadata.productName + "Setup.msi");
            }
          }
          return done();
        });
      });
    });
  };

  convertVersion = function(version) {
    var mainVersion, parts;
    parts = version.split('-');
    mainVersion = parts.shift();
    if (parts.length > 0) {
      return [mainVersion, parts.join('-').replace(/\./g, '')].join('-');
    } else {
      return mainVersion;
    }
  };

  module.exports.convertVersion = convertVersion;

}).call(this);
