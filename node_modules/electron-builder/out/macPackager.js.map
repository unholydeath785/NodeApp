{"version":3,"file":"macPackager.js","sourceRoot":"","sources":["../src/macPackager.ts"],"names":[],"mappings":"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","sourcesContent":["import { PlatformPackager, BuildInfo } from \"./platformPackager\"\nimport * as path from \"path\"\nimport { Promise as BluebirdPromise } from \"bluebird\"\nimport { tsAwaiter } from \"./awaiter\"\nimport { log, spawn } from \"./util\"\nimport { createKeychain, deleteKeychain, CodeSigningInfo, generateKeychainName, sign } from \"./codeSign\"\n\nconst __awaiter = tsAwaiter\nArray.isArray(__awaiter)\n\nexport default class MacPackager extends PlatformPackager<appdmg.Specification> {\n  codeSigningInfo: Promise<CodeSigningInfo>\n\n  constructor(info: BuildInfo, cleanupTasks: Array<() => Promise<any>>) {\n    super(info)\n\n    if (this.options.cscLink != null && this.options.cscKeyPassword != null) {\n      const keychainName = generateKeychainName()\n      cleanupTasks.push(() => deleteKeychain(keychainName))\n      this.codeSigningInfo = createKeychain(keychainName, this.options.cscLink, this.options.cscKeyPassword)\n    }\n    else {\n      this.codeSigningInfo = BluebirdPromise.resolve(null)\n    }\n  }\n\n  getBuildConfigurationKey() {\n    return \"osx\"\n  }\n\n  async pack(platform: string, outDir: string, appOutDir: string): Promise<any> {\n    await super.pack(platform, outDir, appOutDir)\n    let codeSigningInfo = await this.codeSigningInfo\n    return await this.signMac(path.join(appOutDir, this.metadata.name + \".app\"), codeSigningInfo)\n  }\n\n  private signMac(distPath: string, codeSigningInfo: CodeSigningInfo): Promise<any> {\n    if (codeSigningInfo == null) {\n      codeSigningInfo = {cscName: this.options.sign || process.env.CSC_NAME}\n    }\n\n    if (codeSigningInfo.cscName == null) {\n      log(\"App is not signed: CSC_LINK or CSC_NAME are not specified\")\n      return BluebirdPromise.resolve()\n    }\n    else {\n      log(\"Signing app\")\n      return sign(distPath, codeSigningInfo)\n    }\n  }\n\n  packageInDistributableFormat(outDir: string, appOutDir: string): Promise<any> {\n    const artifactPath = path.join(appOutDir, this.metadata.name + \"-\" + this.metadata.version + \".dmg\")\n    return BluebirdPromise.all([\n      new BluebirdPromise<any>((resolve, reject) => {\n        log(\"Creating DMG\")\n\n        const specification: appdmg.Specification = {\n          title: this.metadata.name,\n          icon: \"build/icon.icns\",\n          \"icon-size\": 80,\n          background: \"build/background.png\",\n          contents: [\n            {\n              \"x\": 410, \"y\": 220, \"type\": \"link\", \"path\": \"/Applications\"\n            },\n            {\n              \"x\": 130, \"y\": 220, \"type\": \"file\"\n            }\n          ]\n        }\n\n        if (this.customDistOptions != null) {\n          Object.assign(specification, this.customDistOptions)\n        }\n\n        if (specification.title == null) {\n          specification.title = this.metadata.name\n        }\n\n        specification.contents[1].path = path.join(appOutDir, this.metadata.name + \".app\")\n\n        const emitter = require(\"appdmg\")({\n          target: artifactPath,\n          basepath: this.projectDir,\n          specification: specification\n        })\n        emitter.on(\"error\", reject)\n        emitter.on(\"finish\", () => resolve())\n      })\n        .then(() => this.dispatchArtifactCreated(artifactPath)),\n\n      this.zipMacApp(appOutDir)\n        .then(it => this.dispatchArtifactCreated(it))\n    ])\n  }\n\n  private zipMacApp(outDir: string): Promise<string> {\n    log(\"Creating ZIP for Squirrel.Mac\")\n    const appName = this.metadata.name\n    // -y param is important - \"store symbolic links as the link instead of the referenced file\"\n    const resultPath = `${appName}-${this.metadata.version}-mac.zip`\n    return spawn(\"zip\", [\"-ryXq\", resultPath, appName + \".app\"], {\n      cwd: outDir,\n      stdio: \"inherit\",\n    })\n      .thenReturn(outDir + \"/\" + resultPath)\n  }\n}"]}