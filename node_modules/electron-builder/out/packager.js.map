{"version":3,"file":"packager.js","sourceRoot":"","sources":["../src/packager.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from \"fs\"\nimport * as path from \"path\"\nimport { DEFAULT_APP_DIR_NAME, installDependencies, log, getElectronVersion, readPackageJson } from \"./util\"\nimport { all, executeFinally } from \"./promise\"\nimport { EventEmitter } from \"events\"\nimport { Promise as BluebirdPromise } from \"bluebird\"\nimport { tsAwaiter } from \"./awaiter\"\nimport { AppMetadata, InfoRetriever } from \"./repositoryInfo\"\nimport { PackagerOptions, PlatformPackager, BuildInfo, DevMetadata } from \"./platformPackager\"\nimport MacPackager from \"./macPackager\"\nimport WinPackager from \"./winPackager\"\nimport * as errorMessages from \"./errorMessages\"\nimport * as util from \"util\"\n\nconst __awaiter = tsAwaiter\nArray.isArray(__awaiter)\n\nfunction addHandler(emitter: EventEmitter, event: string, handler: Function) {\n  emitter.on(event, handler)\n}\n\nexport class Packager implements BuildInfo {\n  projectDir: string\n\n  appDir: string\n\n  metadata: AppMetadata\n  devMetadata: DevMetadata\n\n  private isTwoPackageJsonProjectLayoutUsed = true\n\n  electronVersion: string\n\n  eventEmitter = new EventEmitter()\n\n  //noinspection JSUnusedLocalSymbols\n  constructor(public options: PackagerOptions, public repositoryInfo: InfoRetriever = null) {\n    this.projectDir = options.projectDir == null ? process.cwd() : path.resolve(options.projectDir)\n    this.appDir = this.computeAppDirectory()\n  }\n\n  artifactCreated(handler: (path: string) => void): Packager {\n    addHandler(this.eventEmitter, \"artifactCreated\", handler)\n    return this\n  }\n\n  get devPackageFile(): string {\n    return path.join(this.projectDir, \"package.json\")\n  }\n\n  async build(): Promise<any> {\n    const buildPackageFile = this.devPackageFile\n    const appPackageFile = this.projectDir === this.appDir ? buildPackageFile : path.join(this.appDir, \"package.json\")\n    const platforms = normalizePlatforms(this.options.platform)\n    await BluebirdPromise.all(Array.from(new Set([buildPackageFile, appPackageFile]), readPackageJson))\n      .then(result => {\n        this.metadata = result[result.length - 1]\n        this.devMetadata = result[0]\n        this.checkMetadata(appPackageFile, platforms)\n\n        this.electronVersion = getElectronVersion(this.devMetadata, buildPackageFile)\n      })\n\n    const cleanupTasks: Array<() => Promise<any>> = []\n    return executeFinally(this.doBuild(platforms, cleanupTasks), error => all(cleanupTasks.map(it => it())))\n  }\n\n  private async doBuild(platforms: Array<string>, cleanupTasks: Array<() => Promise<any>>): Promise<any> {\n    const distTasks: Array<Promise<any>> = []\n    for (let platform of platforms) {\n      const helper = this.createHelper(platform, cleanupTasks)\n      const archs = platform === \"darwin\" ? [\"x64\"] : (this.options.arch == null || this.options.arch === \"all\" ? [\"ia32\", \"x64\"] : [this.options.arch])\n      for (let arch of archs) {\n        await this.installAppDependencies(arch)\n\n        helper.currentArch = arch\n        const outDir = path.join(this.projectDir, \"dist\")\n        const appOutDir = path.join(outDir, this.metadata.name + \"-\" + platform + \"-\" + arch)\n        await helper.pack(platform, outDir, appOutDir)\n        if (this.options.dist) {\n          distTasks.push(helper.packageInDistributableFormat(outDir, appOutDir))\n        }\n      }\n    }\n\n    return await BluebirdPromise.all(distTasks)\n  }\n\n  private createHelper(platform: string, cleanupTasks: Array<() => Promise<any>>): PlatformPackager<any> {\n    switch (platform) {\n      case \"darwin\":\n      case \"osx\":\n      {\n        const helperClass: typeof MacPackager = require(\"./macPackager\").default\n        return new helperClass(this, cleanupTasks)\n      }\n\n      case \"win32\":\n      case \"win\":\n      case \"windows\":\n      {\n        const helperClass: typeof WinPackager = require(\"./winPackager\").default\n        return new helperClass(this, cleanupTasks)\n      }\n\n      case \"linux\":\n        return new (require(\"./linuxPackager\").LinuxPackager)(this)\n\n      default:\n        throw new Error(\"Unsupported platform: \" + platform)\n    }\n  }\n\n  // Auto-detect app/ (two package.json project layout (development and app)) or fallback to use working directory if not explicitly specified\n  private computeAppDirectory(): string {\n    let customAppPath = this.options.appDir\n    let required = true\n    if (customAppPath == null) {\n      customAppPath = DEFAULT_APP_DIR_NAME\n      required = false\n    }\n\n    const absoluteAppPath = path.join(this.projectDir, customAppPath)\n    try {\n      fs.accessSync(absoluteAppPath)\n    }\n    catch (e) {\n      if (required) {\n        throw new Error(customAppPath + \" doesn't exists, \" + e.message)\n      }\n      else {\n        this.isTwoPackageJsonProjectLayoutUsed = false\n        return this.projectDir\n      }\n    }\n    return absoluteAppPath\n  }\n\n  private checkMetadata(appPackageFile: string, platforms: Array<string>): void {\n    const reportError = (missedFieldName: string) => {\n      throw new Error(\"Please specify '\" + missedFieldName + \"' in the application package.json ('\" + appPackageFile + \"')\")\n    }\n\n    const metadata = this.metadata\n    if (metadata.name == null) {\n      reportError(\"name\")\n    }\n    else if (metadata.description == null) {\n      reportError(\"description\")\n    }\n    else if (metadata.version == null) {\n      reportError(\"version\")\n    }\n    else if (metadata.build == null) {\n      throw new Error(util.format(errorMessages.buildIsMissed, appPackageFile))\n    }\n    else {\n      const author = metadata.author\n      if (author == null) {\n        reportError(\"author\")\n      }\n      else if (this.options.dist && author.email == null && platforms.includes(\"linux\")) {\n        throw new Error(util.format(errorMessages.authorEmailIsMissed, appPackageFile))\n      }\n    }\n  }\n\n  private installAppDependencies(arch: string): Promise<any> {\n    if (this.isTwoPackageJsonProjectLayoutUsed) {\n      return installDependencies(this.appDir, arch, this.electronVersion)\n    }\n    else {\n      log(\"Skipping app dependencies installation because dev and app dependencies are not separated\")\n      return BluebirdPromise.resolve(null)\n    }\n  }\n}\n\nfunction normalizePlatforms(platforms: Array<string>): Array<string> {\n  if (platforms == null || platforms.length === 0) {\n    return [process.platform]\n  }\n  else if (platforms[0] === \"all\") {\n    if (process.platform === \"darwin\") {\n      return [\"darwin\", \"linux\", \"win32\"]\n    }\n    else if (process.platform === \"linux\") {\n      // OS X code sign works only on OS X\n      return [\"linux\", \"win32\"]\n    }\n    else {\n      return [\"win32\"]\n    }\n  }\n  else {\n    return platforms\n  }\n}\n"]}