{"version":3,"file":"linuxPackager.js","sourceRoot":"","sources":["../src/linuxPackager.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from \"path\"\nimport { Promise as BluebirdPromise } from \"bluebird\"\nimport { tsAwaiter } from \"./awaiter\"\nimport { init } from \"../lib/linux\"\nimport { PlatformPackager, BuildInfo } from \"./platformPackager\"\nimport { dir as _tpmDir, Options as TmpOptions } from \"tmp\"\nimport { exec, log } from \"./util\"\nimport { State as Gm } from \"gm\"\n\nconst __awaiter = tsAwaiter\nArray.isArray(__awaiter)\n\nconst buildDeb = BluebirdPromise.promisify(init().build)\nconst tmpDir = BluebirdPromise.promisify(<(config: TmpOptions, callback: (error: Error, path: string, cleanupCallback: () => void) => void) => void>_tpmDir)\n\nexport class LinuxPackager extends PlatformPackager<DebOptions> {\n  desktopIcons: Promise<Array<string>>\n\n  constructor(info: BuildInfo) {\n    super(info)\n\n    if (this.options.dist && (this.customDistOptions == null || this.customDistOptions.desktopTemplate == null)) {\n      this.desktopIcons = this.computeDesktopIconPath()\n    }\n    else {\n      this.desktopIcons = BluebirdPromise.resolve(null)\n    }\n  }\n\n  private async computeDesktopIconPath(): Promise<Array<string>> {\n    const tempDir = await tmpDir({\n      unsafeCleanup: true,\n      prefix: \"png-icons\"\n    })\n\n    const outputs = await exec(\"icns2png\", [\"-x\", \"-o\", tempDir, path.join(this.projectDir, \"build\", \"icon.icns\")])\n    if (!outputs[0].toString().includes(\"ih32\")) {\n      log(\"48x48 is not found in the icns, 128x128 will be resized\")\n      // icns doesn't contain required 48x48, use gm to resize\n      await new BluebirdPromise((resolve, reject) => {\n        (<Gm>require(\"gm\")(path.join(tempDir, \"icon_128x128x32.png\")))\n          .resize(48, 48)\n          .write(path.join(tempDir, \"icon_48x48x32.png\"), error => error == null ? resolve() : reject(error))\n      })\n    }\n\n    const appName = this.metadata.name\n    function createMapping(size: string) {\n      return `${tempDir}/icon_${size}x${size}x32.png=/usr/share/icons/hicolor/${size}x${size}/apps/${appName}.png`\n    }\n\n    return [\n      createMapping(\"16\"),\n      createMapping(\"32\"),\n      createMapping(\"48\"),\n      createMapping(\"128\"),\n      createMapping(\"256\"),\n      createMapping(\"512\"),\n    ]\n  }\n\n  getBuildConfigurationKey() {\n    return \"linux\"\n  }\n\n  async packageInDistributableFormat(outDir: string, appOutDir: string): Promise<any> {\n    const specification: DebOptions = {\n      version: this.metadata.version,\n      title: this.metadata.name,\n      comment: this.metadata.description,\n      maintainer: `${this.metadata.author.name} <${this.metadata.author.email}>`,\n      arch: this.currentArch === \"ia32\" ? 32 : 64,\n      target: \"deb\",\n      executable: this.metadata.name,\n      desktop: `[Desktop Entry]\n      Name=${this.metadata.name}\n      Comment=${this.metadata.description}\n      Exec=${this.metadata.name}\n      Terminal=false\n      Type=Application\n      Icon=${this.metadata.name}\n      `,\n      dirs: await this.desktopIcons\n    }\n\n    if (this.customDistOptions != null) {\n      Object.assign(specification, this.customDistOptions)\n    }\n    return await buildDeb({\n      log: function emptyLog() {/* ignore out */},\n      appPath: appOutDir,\n      out: outDir,\n      config: {\n        linux: specification\n      }\n    })\n      .then(it => this.dispatchArtifactCreated(it))\n  }\n}\n\nexport interface DebOptions {\n  title: string\n  comment: string\n\n  version: string\n\n  arch: number\n  maintainer: string\n  executable: string\n  target: string\n\n  desktopTemplate?: string\n  desktop?: string\n\n  dirs?: Array<string>\n}"]}