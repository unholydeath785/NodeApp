{"version":3,"file":"builder.js","sourceRoot":"","sources":["../src/builder.ts"],"names":[],"mappings":"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","sourcesContent":["import { Packager } from \"./packager\"\nimport { PackagerOptions } from \"./platformPackager\"\nimport { PublishOptions, Publisher, GitHubPublisher } from \"./gitHubPublisher\"\nimport { executeFinally } from \"./promise\"\nimport { Promise as BluebirdPromise } from \"bluebird\"\nimport { tsAwaiter } from \"./awaiter\"\nimport { InfoRetriever } from \"./repositoryInfo\"\nimport { log } from \"./util\"\n\nconst __awaiter = tsAwaiter\nArray.isArray(__awaiter)\n\nexport async function createPublisher(packager: Packager, options: BuildOptions, repoSlug: InfoRetriever, isPublishOptionGuessed: boolean = false): Promise<Publisher> {\n  const info = await repoSlug.getInfo(packager)\n  if (info == null) {\n    if (isPublishOptionGuessed) {\n      return null\n    }\n\n    log(\"Cannot detect repository by .git/config\")\n    throw new Error(\"Please specify 'repository' in the dev package.json ('\" + packager.devPackageFile + \"')\")\n  }\n  else {\n    return new GitHubPublisher(info.user, info.project, packager.metadata.version, options.githubToken, options.publish !== \"onTagOrDraft\")\n  }\n}\n\nexport interface BuildOptions extends PackagerOptions, PublishOptions {\n}\n\nexport function build(options: BuildOptions = {}): Promise<any> {\n  if (options.cscLink == null) {\n    options.cscLink = process.env.CSC_LINK\n  }\n  if (options.cscKeyPassword == null) {\n    options.cscKeyPassword = process.env.CSC_KEY_PASSWORD\n  }\n\n  if (options.githubToken == null) {\n    options.githubToken = process.env.GH_TOKEN || process.env.GH_TEST_TOKEN\n  }\n\n  const lifecycleEvent = process.env.npm_lifecycle_event\n  if (options.dist === undefined) {\n    options.dist = lifecycleEvent === \"dist\" || lifecycleEvent === \"build\"\n  }\n\n  if (options.publish) {\n    options.dist = true\n  }\n\n  let isPublishOptionGuessed = false\n  if (options.publish === undefined) {\n    if (lifecycleEvent === \"release\") {\n      options.publish = \"always\"\n    }\n    else {\n      const tag = process.env.TRAVIS_TAG || process.env.APPVEYOR_REPO_TAG_NAME || process.env.CIRCLE_TAG\n      if (tag != null && tag.length !== 0) {\n        log(\"Tag %s is defined, so artifacts will be published\", tag)\n        options.publish = \"onTag\"\n        isPublishOptionGuessed = true\n      }\n      else if ((process.env.TRAVIS || process.env.APPVEYOR || process.env.CIRCLECI || \"\").toLowerCase() === \"true\") {\n        log(\"CI detected, so artifacts will be published if draft release exists\")\n        options.publish = \"onTagOrDraft\"\n        isPublishOptionGuessed = true\n      }\n    }\n  }\n\n  const publishTasks: Array<BluebirdPromise<any>> = []\n  const repositoryInfo = new InfoRetriever()\n  const packager = new Packager(options, repositoryInfo)\n  if (options.publish != null && options.publish !== \"never\") {\n    let publisher: BluebirdPromise<Publisher> = null\n    packager.artifactCreated(path => {\n      if (publisher == null) {\n        publisher = <BluebirdPromise<Publisher>>createPublisher(packager, options, repositoryInfo, isPublishOptionGuessed)\n      }\n\n      if (publisher != null) {\n        publisher.then(it => publishTasks.push(<BluebirdPromise<any>>it.upload(path)))\n      }\n    })\n  }\n  return executeFinally(packager.build(), error => {\n    if (error == null) {\n      return Promise.all(publishTasks)\n    }\n    else {\n      for (let task of publishTasks) {\n        task.cancel()\n      }\n      return null\n    }\n  })\n}"]}