{"version":3,"file":"util.js","sourceRoot":"","sources":["../src/util.ts"],"names":[],"mappings":"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","sourcesContent":["import { execFile, spawn as _spawn } from \"child_process\"\nimport { Promise as BluebirdPromise } from \"bluebird\"\nimport \"source-map-support/register\"\nimport readPackageJsonAsync = require(\"read-package-json\")\n\nexport const log = console.log\n\nBluebirdPromise.config({\n  longStackTraces: true,\n  cancellation: true\n})\n\nexport const DEFAULT_APP_DIR_NAME = \"app\"\n\nexport const commonArgs: any[] = [{\n  name: \"appDir\",\n  type: String,\n  description: \"Relative (to the working directory) path to the folder containing the application package.json. Working directory or app/ by default.\"\n}]\n\nconst execFileAsync: (file: string, args?: string[], options?: ExecOptions) => BluebirdPromise<Buffer[]> = (<any>BluebirdPromise.promisify(execFile, {multiArgs: true}))\nexport const readPackageJson = BluebirdPromise.promisify(readPackageJsonAsync)\n\nexport function installDependencies(appDir: string, arch: string, electronVersion: string): BluebirdPromise<any> {\n  log(\"Installing app dependencies for arch %s to %s\", arch || process.arch, appDir)\n  const env = Object.assign({}, process.env, {\n    npm_config_disturl: \"https://atom.io/download/atom-shell\",\n    npm_config_target: electronVersion,\n    npm_config_runtime: \"electron\",\n    HOME: require(\"os\").homedir() + \"/.electron-gyp\",\n  })\n\n  if (arch != null) {\n    env.npm_config_arch = arch\n  }\n\n  let npmExecPath = process.env.npm_execpath || process.env.NPM_CLI_JS\n  const npmExecArgs = [\"install\"]\n  if (npmExecPath == null) {\n    npmExecPath = \"npm\"\n  }\n  else {\n    npmExecArgs.unshift(npmExecPath)\n    npmExecPath = process.env.npm_node_execpath || process.env.NODE_EXE || \"node\"\n  }\n\n  return spawn(npmExecPath, npmExecArgs, {\n    cwd: appDir,\n    stdio: \"inherit\",\n    env: env\n  })\n}\n\nexport interface BaseExecOptions {\n  cwd?: string\n  env?: any\n  stdio?: any\n}\n\nexport interface ExecOptions extends BaseExecOptions {\n  customFds?: any\n  encoding?: string\n  timeout?: number\n  maxBuffer?: number\n  killSignal?: string\n}\n\nexport interface SpawnOptions extends BaseExecOptions {\n  custom?: any\n  detached?: boolean\n}\n\nexport function exec(file: string, args?: string[], options?: ExecOptions): BluebirdPromise<Buffer[]> {\n  return execFileAsync(file, args, options)\n}\n\nexport function spawn(command: string, args?: string[], options?: SpawnOptions): BluebirdPromise<any> {\n  return new BluebirdPromise<any>((resolve, reject) => {\n    const p = _spawn(command, args, options)\n    p.on(\"close\", (code: number) => code === 0 ? resolve() : reject(new Error(command + \" exited with code \" + code)))\n  })\n}\n\nexport function getElectronVersion(packageData: any, filePath: string): string {\n  const devDependencies = packageData.devDependencies\n  let electronPrebuiltDep = devDependencies == null ? null : devDependencies[\"electron-prebuilt\"]\n  if (electronPrebuiltDep == null) {\n    const dependencies = packageData.dependencies\n    electronPrebuiltDep = dependencies == null ? null : dependencies[\"electron-prebuilt\"]\n  }\n\n  if (electronPrebuiltDep == null) {\n    throw new Error(\"Cannot find electron-prebuilt dependency to get electron version in the '\" + filePath + \"'\")\n  }\n  return electronPrebuiltDep.substring(1)\n}"]}