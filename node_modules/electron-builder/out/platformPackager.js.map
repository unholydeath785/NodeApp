{"version":3,"file":"platformPackager.js","sourceRoot":"","sources":["../src/platformPackager.ts"],"names":[],"mappings":";;AAEA,0BAA0B,AAAW,AACrC,AAAC;AAAD,2BAA2C,AAAU,AACrD,AAAC;AAAD,MAAY,AAAI,eAAM,AAAM,AAC5B,AAAC;AAAD,MAAO,AAAQ,mBAAW,AAAsB,AAAC;AAEjD,MAAM,AAAS,YAAG,UAAS;AAC3B,AAAK,MAAC,AAAO,QAAC,AAAS,AAAC;AAExB,MAAM,AAAI,OAAG,WAAe,QAAC,AAAS,UAAC,AAAQ,AAAC;AA6ChD;AAcE,gBAAsB,AAAe;AAAf,aAAI,OAAJ,AAAI,AAAW;AACnC,AAAI,aAAC,AAAO,UAAG,AAAI,KAAC,AAAO;AAC3B,AAAI,aAAC,AAAU,aAAG,AAAI,KAAC,AAAU;AACjC,AAAI,aAAC,AAAQ,WAAG,AAAI,KAAC,AAAQ;AAC7B,AAAI,aAAC,AAAW,cAAG,AAAI,KAAC,AAAW;AAEnC,AAAE,AAAC,YAAC,AAAI,KAAC,AAAO,QAAC,AAAI,AAAC,MAAC,AAAC;AACtB,kBAAM,AAAa,gBAAQ,AAAI,KAAC,AAAW,YAAC,AAAK;AACjD,AAAI,iBAAC,AAAiB,oBAAG,AAAa,iBAAI,AAAI,OAAG,AAAa,gBAAG,AAAa,cAAC,AAAI,KAAC,AAAwB,AAAE,AAAC,AACjH,AAAC,AACH,AAAC;;;AAES,AAAuB,4BAAC,AAAY;AAC5C,AAAI,aAAC,AAAI,KAAC,AAAY,aAAC,AAAI,KAAC,AAAiB,mBAAE,AAAI,AAAC,AACtD,AAAC;;AAED,AAAI,SAAC,AAAgB,UAAE,AAAc,QAAE,AAAiB;AACtD,cAAM,AAAO,UAAG,AAAI,KAAC,AAAQ,SAAC,AAAO;AACrC,YAAI,AAAY,eAAG,AAAO;AAC1B,cAAM,AAAW,cAAG,AAAO,QAAC,AAAG,IAAC,AAAmB,uBAAI,AAAO,QAAC,AAAG,IAAC,AAAqB,yBAAI,AAAO,QAAC,AAAG,IAAC,AAAgB;AACxH,AAAE,AAAC,YAAC,AAAW,eAAI,AAAI,AAAC,MAAC,AAAC;AACxB,AAAY,4BAAI,AAAG,MAAG,AAAW,AACnC,AAAC;;AAED,cAAM,AAAO,iBAAU,AAAM,OAAC;AAC5B,AAAG,iBAAE,AAAI,KAAC,AAAI,KAAC,AAAM;AACrB,AAAG,iBAAE,AAAM;AACX,AAAI,kBAAE,AAAI,KAAC,AAAQ,SAAC,AAAI;AACxB,AAAQ,sBAAE,AAAQ;AAClB,AAAI,kBAAE,AAAI,KAAC,AAAW;AACtB,AAAO,qBAAE,AAAI,KAAC,AAAI,KAAC,AAAe;AAClC,AAAI,kBAAE,AAAI,KAAC,AAAI,KAAC,AAAI,KAAC,AAAU,YAAE,AAAO,SAAE,AAAM,AAAC;AACjD,AAAI,kBAAE,AAAI;AACV,AAAS,uBAAE,AAAI;AACf,AAAa,2BAAE,AAAO;AACtB,AAAe,6BAAE,AAAY;AAC7B,AAAgB,8BAAE;AAChB,AAAW,6BAAE,AAAI,KAAC,AAAQ,SAAC,AAAM,OAAC,AAAI;AACtC,AAAe,iCAAE,AAAI,KAAC,AAAQ,SAAC,AAAW;AAC1C,AAAc,gCAAE,AAAO;AACvB,AAAW,6BAAE,AAAY;AACzB,AAAW,6BAAE,AAAI,KAAC,AAAQ,SAAC,AAAI;AAC/B,AAAY,8BAAE,AAAI,KAAC,AAAQ,SAAC,AAAI,AACjC,AACF;;SApBe,AAAM,EAoBnB,AAAI,KAAC,AAAQ,SAAC,AAAK,OAAE,EAAC,AAAQ,UAAE,AAAK,AAAC,AAAC;AAG1C,eAAO,AAAO,QAAC,AAAO;AACtB,AAAM,eAAC,AAAI,KAAC,AAAO,AAAC,AACtB,AAAC,AAGH,AAAC;;;AAlEqB,QAAgB,mBAkErC","sourcesContent":["import { AppMetadata, InfoRetriever, ProjectMetadataProvider, Metadata } from \"./repositoryInfo\"\nimport EventEmitter = NodeJS.EventEmitter\nimport { tsAwaiter } from \"./awaiter\"\nimport { Promise as BluebirdPromise } from \"bluebird\"\nimport * as path from \"path\"\nimport packager = require(\"electron-packager-tf\")\n\nconst __awaiter = tsAwaiter\nArray.isArray(__awaiter)\n\nconst pack = BluebirdPromise.promisify(packager)\n\nexport interface DevMetadata extends Metadata {\n  build: DevBuildMetadata\n}\n\nexport interface DevBuildMetadata {\n  osx: appdmg.Specification\n  win: any,\n  linux: any\n}\n\nexport interface PackagerOptions {\n  arch?: string\n\n  dist?: boolean\n  githubToken?: string\n\n  sign?: string\n\n  platform?: Array<string>\n  target?: Array<string>\n\n  appDir?: string\n\n  projectDir?: string\n\n  cscLink?: string\n  cscKeyPassword?: string\n}\n\nexport interface BuildInfo extends ProjectMetadataProvider {\n  options: PackagerOptions\n\n  devMetadata: DevMetadata\n\n  projectDir: string\n  appDir: string\n\n  electronVersion: string\n\n  repositoryInfo: InfoRetriever\n  eventEmitter: EventEmitter\n}\n\nexport abstract class PlatformPackager<DC> implements ProjectMetadataProvider {\n  protected options: PackagerOptions\n\n  protected projectDir: string\n\n  metadata: AppMetadata\n  devMetadata: Metadata\n\n  customDistOptions: DC\n\n  currentArch: string\n\n  protected abstract getBuildConfigurationKey(): string\n\n  constructor(protected info: BuildInfo) {\n    this.options = info.options\n    this.projectDir = info.projectDir\n    this.metadata = info.metadata\n    this.devMetadata = info.devMetadata\n\n    if (this.options.dist) {\n      const buildMetadata: any = info.devMetadata.build\n      this.customDistOptions = buildMetadata == null ? buildMetadata : buildMetadata[this.getBuildConfigurationKey()]\n    }\n  }\n\n  protected dispatchArtifactCreated(path: string) {\n    this.info.eventEmitter.emit(\"artifactCreated\", path)\n  }\n\n  pack(platform: string, outDir: string, appOutDir: string): Promise<any> {\n    const version = this.metadata.version\n    let buildVersion = version\n    const buildNumber = process.env.TRAVIS_BUILD_NUMBER || process.env.APPVEYOR_BUILD_NUMBER || process.env.CIRCLE_BUILD_NUM\n    if (buildNumber != null) {\n      buildVersion += \".\" + buildNumber\n    }\n\n    const options = Object.assign({\n      dir: this.info.appDir,\n      out: outDir,\n      name: this.metadata.name,\n      platform: platform,\n      arch: this.currentArch,\n      version: this.info.electronVersion,\n      icon: path.join(this.projectDir, \"build\", \"icon\"),\n      asar: true,\n      overwrite: true,\n      \"app-version\": version,\n      \"build-version\": buildVersion,\n      \"version-string\": {\n        CompanyName: this.metadata.author.name,\n        FileDescription: this.metadata.description,\n        ProductVersion: version,\n        FileVersion: buildVersion,\n        ProductName: this.metadata.name,\n        InternalName: this.metadata.name,\n      }\n    }, this.metadata.build, {\"tmpdir\": false})\n\n    // this option only for windows-installer\n    delete options.iconUrl\n    return pack(options)\n  }\n\n  abstract packageInDistributableFormat(outDir: string, appOutDir: string): Promise<any>\n}"]}