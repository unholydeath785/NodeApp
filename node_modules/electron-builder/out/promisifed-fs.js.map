{"version":3,"file":"promisifed-fs.js","sourceRoot":"","sources":["../src/promisifed-fs.ts"],"names":[],"mappings":";;AAAA,MAAY,AAAE,aAAM,AAAI,AACxB,AAAC;AAAD,2BAA2C,AAAU,AAErD,AAAC;AAAD,MAAM,AAAa,gBAAwE,WAAe,QAAC,AAAS,UAAC,AAAE,GAAC,AAAQ,AAAC;AAEjI,kBAAyB,AAAY;AACnC,AAAM,WAA0B,AAAa,cAAC,AAAI,MAAE,AAAM,AAAC,AAC7D,AAAC;;AAFe,QAAQ,WAEvB;AAED,oBAA2B,AAAY;QAAE,AAAiB,0EAAY,AAAK;;AACzE,AAAM,WAAC,IAAI,WAAe,SAAO,AAAO,SAAE,AAAM;AAC9C,AAAE,WAAC,AAAM,OAAC,AAAI,MAAE,AAAE,MAAI,AAAE,MAAI,AAAI,AAAI,QAAC,AAAiB,qBAAI,AAAE,GAAC,AAAI,SAAK,AAAQ,AAAC,WAAG,AAAO,QAAC,AAAI,AAAC,QAAG,AAAM,OAAC,AAAE,AAAC,AAAC,AAC/G,AAAC,AAAC,AACJ,AAAC;KAHiC;;AADlB,QAAU,aAIzB;AAGD,oBAA2B,AAAe,SAAE,AAAe;AACzD,AAAM,WAAC,IAAI,WAAe,SAAO,AAAO,SAAE,AAAM;AAC9C,AAAE,WAAC,AAAM,OAAC,AAAO,SAAE,AAAO,SAAE,AAAK,SAAI,AAAK,SAAI,AAAI,OAAG,AAAO,QAAC,AAAO,AAAC,WAAG,AAAM,OAAC,AAAK,AAAC,AAAC,AACxF,AAAC,AAAC,AACJ,AAAC;KAHiC;;AADlB,QAAU,aAIzB;AAED,MAAM,AAAa,gBAAG,WAAe,QAAC,AAAS,UAAC,AAAE,GAAC,AAAI,AAAC;AAExD,cAAqB,AAAY;AAC/B,AAAM,WAAC,AAAa,cAAC,AAAI,AAAC,AAC5B,AAAC;;AAFe,QAAI,OAEnB","sourcesContent":["import * as fs from \"fs\"\nimport { Promise as BluebirdPromise } from \"bluebird\"\n\nconst readFileAsync: ((filename: string, encoding?: string) => Promise<string | Buffer>) = BluebirdPromise.promisify(fs.readFile)\n\nexport function readText(file: string): BluebirdPromise<string> {\n  return <BluebirdPromise<string>>readFileAsync(file, \"utf8\")\n}\n\nexport function deleteFile(path: string, ignoreIfNotExists: boolean = false): BluebirdPromise<any> {\n  return new BluebirdPromise<any>((resolve, reject) => {\n    fs.unlink(path, it => it == null || (ignoreIfNotExists && it.code === \"ENOENT\") ? resolve(null) : reject(it))\n  })\n}\n\n// returns new name\nexport function renameFile(oldPath: string, newPath: string): BluebirdPromise<string> {\n  return new BluebirdPromise<any>((resolve, reject) => {\n    fs.rename(oldPath, newPath, error => error == null ? resolve(newPath) : reject(error))\n  })\n}\n\nconst statFileAsync = BluebirdPromise.promisify(fs.stat)\n\nexport function stat(path: string): BluebirdPromise<fs.Stats> {\n  return statFileAsync(path)\n}"]}