{"version":3,"file":"winPackager.js","sourceRoot":"","sources":["../src/winPackager.ts"],"names":[],"mappings":";;AAAA,2BAAoC,AAAY,AAChD,AAAC;AAAD,2BAA2C,AAAU,AACrD,AAAC;AAAD,0BAA0B,AAAW,AACrC,AAAC;AAAD,mCAA4C,AAAoB,AAChE,AAAC;AAAD,MAAY,AAAI,eAAM,AAAM,AAC5B,AAAC;AACD,uBAAoB,AAAQ,AAC5B,AAAC;AAAD,gCAA6C,AAAiB,AAC9D,AAAC;AAAD,MAAY,AAAG,cAAM,AAAU,AAE/B,AAAC;AAAD,MAAM,AAAS,YAAG,UAAS;AAC3B,AAAK,MAAC,AAAO,QAAC,AAAS,AAAC;AAExB,MAAM,AAAQ,WAAG,WAAe,QAAC,AAAS,UAAC,AAAG,IAAC,AAAQ,AAAC;AAExD,0BAAyC,mBAAgB;AAIvD,gBAAY,AAAe,MAAE,AAAuC;AAClE,cAAM,AAAI,AAAC;AAGX,AAAI,aAAC,AAAM,SAAG,AAAI,KAAC,AAAO,QAAC,AAAM,UAAI,AAAI,QAAI,AAAI,KAAC,AAAO,QAAC,AAAM,OAAC,AAAQ,QAAC,AAAM,AAAC;AACjF,AAAE,AAAC,YAAC,AAAI,KAAC,AAAM,AAAC,QAAC,AAAC;AAKhB,kBAAM,AAAQ,WAAG,AAAI,KAAC,AAAiB,qBAAI,AAAI,OAAG,AAAI,OAAG,AAAI,KAAC,AAAiB,kBAAC,AAAI;AACpF,AAAO,oBAAC,AAAY,AAAC,cAAC,AAAqB,sBAAC,AAAQ,YAAI,AAAI,KAAC,AAAI,KAAC,AAAI,KAAC,AAAU,YAAE,AAAO,SAAE,AAAU,AAAC,AAAC,AAC1G,AAAC;;AAID,AAAE,AAAC,YAAC,AAAI,KAAC,AAAO,QAAC,AAAO,WAAI,AAAI,QAAI,AAAI,KAAC,AAAO,QAAC,AAAc,kBAAI,AAAI,QAAI,AAAO,QAAC,AAAQ,aAAK,AAAQ,AAAC;AACvG,AAAI,iBAAC,AAAe,kBAAG,WAAmB,oBAAC,AAAI,KAAC,AAAO,QAAC,AAAO,AAAC,SAC7D,AAAI;AACH,AAAY,6BAAC,AAAI,KAAC,MAAM,gBAAU,WAAC,AAAI,MAAE,AAAI,AAAC,AAAC;AAC/C,AAAM,uBAAC,AAAI,AACb,AAAC,AAAC,AACN,AAAC,AACD,AAAI;aALM,AAAI,EAF4F,AAAC;eAOtG,AAAC;AACJ,AAAI,iBAAC,AAAe,kBAAG,WAAe,QAAC,AAAO,QAAC,AAAI,AAAC,AACtD,AAAC,AACH,AAAC;;;AAED,AAAwB;AACtB,AAAM,eAAC,AAAK,AACd,AAAC;;AAED,AAAI,SAAC,AAAgB,UAAE,AAAc,QAAE,AAAiB;AACtD,AAAE,AAAC,YAAC,AAAI,KAAC,AAAO,QAAC,AAAI,QAAI,CAAC,AAAI,KAAC,AAAM,AAAC,QAAC,AAAC;AACtC,kBAAM,AAAY,eAAG,AAAI,KAAC,AAAc,eAAC,AAAM,AAAC;AAChD,mBAAG,IAAC,AAAa,eAAE,AAAY,AAAC;AAChC,AAAM,mBAAC,WAAe,QAAC,AAAG,IAAC,CACzB,AAAK,MAAC,AAAI,KAAC,AAAQ,UAAE,AAAM,QAAE,AAAS,AAAC,YACvC,AAAQ,SAAC,AAAY,AAAC,AACvB,AAAC,AACJ,AAAC,AACD,AAAI;eAAC,AAAC;AACJ,AAAM,mBAAC,AAAK,MAAC,AAAI,KAAC,AAAQ,UAAE,AAAM,QAAE,AAAS,AAAC,AAChD,AAAC,AACH,AAAC;;;AAEO,AAAc,mBAAC,AAAc;AACnC,AAAM,eAAC,AAAI,KAAC,AAAI,KAAC,AAAM,QAAE,CAAC,AAAI,KAAC,AAAM,SAAG,AAAM,SAAG,AAAK,AAAC,AAAG,UAAC,AAAI,KAAC,AAAW,gBAAK,AAAK,QAAG,AAAM,SAAG,AAAE,AAAC,AAAC,AACvG,AAAC;;AAEK,AAA4B,iCAAC,AAAc,QAAE,AAAiB;;AAClE,gBAAI,AAAO,UAAG,AAAI,KAAC,AAAQ,SAAC,AAAK,MAAC,AAAO;AACzC,AAAE,AAAC,gBAAC,CAAC,AAAO,AAAC,SAAC,AAAC;AACb,AAAE,AAAC,oBAAC,AAAI,KAAC,AAAiB,qBAAI,AAAI,AAAC,MAAC,AAAC;AACnC,AAAO,8BAAG,AAAI,KAAC,AAAiB,kBAAC,AAAO,AAC1C,AAAC;;AACD,AAAE,AAAC,oBAAC,CAAC,AAAO,AAAC,SAAC,AAAC;AACb,AAAE,AAAC,wBAAC,AAAI,KAAC,AAAI,KAAC,AAAc,kBAAI,AAAI,AAAC,MAAC,AAAC;AACrC,8BAAM,AAAI,OAAG,MAAM,AAAI,KAAC,AAAI,KAAC,AAAc,eAAC,AAAO,QAAC,AAAI,AAAC;AACzD,AAAE,AAAC,4BAAC,AAAI,QAAI,AAAI,AAAC,MAAC,AAAC;AACjB,AAAO,sCAAG,sCAAqC,AAAI,KAAC,AAAI,UAAI,AAAI,KAAC,AAAO,SAAwB,AAClG,AAAC,AACH,AAAC;;;AAED,AAAE,AAAC,wBAAC,CAAC,AAAO,AAAC,SAAC,AAAC;AACb,8BAAM,IAAI,AAAK,MAAC,AAAoG,AAAC,AACvH,AAAC,AACH,AAAC,AACH,AAAC;;;;AAED,kBAAM,AAAe,kBAAG,MAAM,AAAI,KAAC,AAAe;AAClD,kBAAM,AAAO,UAAG,AAAI,KAAC,AAAQ,SAAC,AAAO;AACrC,kBAAM,AAAe,kBAAG,AAAI,KAAC,AAAc,eAAC,AAAM,AAAC;AACnD,kBAAM,AAAO,UAAG,AAAI,KAAC,AAAQ,SAAC,AAAI;AAClC,kBAAM,AAAU,aAAG,AAAI,KAAC,AAAW,gBAAK,AAAK,QAAG,AAAM,SAAG,AAAE;AAC3D,kBAAM,AAAgB,mBAAG,AAAI,KAAC,AAAI,KAAC,AAAe,iBAAE,AAAO,UAAG,AAAQ,WAAG,AAAO,UAAG,AAAU,aAAG,AAAM,AAAC;AACvG,kBAAM,AAAO,iBAAU,AAAM,OAAC;AAC5B,AAAI,sBAAE,AAAI,KAAC,AAAQ,SAAC,AAAI;AACxB,AAAY,8BAAE,AAAS;AACvB,AAAe,iCAAE,AAAe;AAChC,AAAW,6BAAE,AAAO;AACpB,AAAO,yBAAE,AAAO;AAChB,AAAW,6BAAE,AAAI,KAAC,AAAQ,SAAC,AAAW;AACtC,AAAO,yBAAE,AAAI,KAAC,AAAQ,SAAC,AAAM;AAC7B,AAAO,yBAAE,AAAO;AAChB,AAAS,2BAAE,AAAI,KAAC,AAAI,KAAC,AAAI,KAAC,AAAU,YAAE,AAAO,SAAE,AAAU,AAAC;AAC1D,AAAe,iCAAE,AAAe;AAChC,AAAmB,qCAAE,AAAI,KAAC,AAAO,QAAC,AAAc,AACjD;aAZe,AAAM,EAYnB,AAAI,KAAC,AAAiB,AAAC;AAE1B,AAAE,AAAC,gBAAC,AAAI,KAAC,AAAM,AAAC,QAAC,AAAC;AAChB,AAAM,uBAAC,MAAM,AAAI,KAAC,AAAI,KAAC,AAAO,SAAE,AAAgB,AAAC,AACnD,AAAC;;AAED,gBAAI,AAAC;AACH,sBAAM,AAAK,QAA6D,AAAO,QAAC,AAA+B,AAAC,iCAAC,AAAK;AACtH,sBAAM,WAAe,QAAC,AAAS,UAAC,AAAK,AAAC,OAAC,AAAO,AAAC,AACjD,AACA;qBAAO,AAAC,AAAC,GAAC,AAAC;AACT,AAAE,AAAC,oBAAC,EAAC,AAAC,EAAC,AAAO,QAAC,AAAQ,QAAC,AAAoB,AAAC,AAAC;AAC5C,0BAAM,AAAC,AACT,AAAC,AACD,AAAI,EAH2C,AAAC;uBAG3C,AAAC;AACJ,wBAAI,AAAe;AACnB,wBAAI,AAAC;AACH,AAAQ,mCAAG,MAAM,gBAAI,KAAC,AAAO,QAAC,AAAS,AAAC,AAC1C,AACA;6BAAO,AAAC,AAAC,GAAC,AAAC;AACT,8BAAM,IAAI,AAAK,MAAC,AAAyC,4CAAG,AAAO,QAAC,AAAS,YAAG,AAAY,AAAC,AAC/F,AAAC;qBAFD,AAAK,AAAC;AAIN,AAAE,AAAC,wBAAC,AAAQ,SAAC,AAAW,AAAE,AAAC,eAAC,AAAC;AAC3B,8BAAM,IAAI,AAAK,MAAC,AAAoC,uCAAG,AAAO,QAAC,AAAS,YAAG,AAAiB,AAAC,AAC/F,AAAC,AACH,AAAC,AACH,AAAC;;;aAjBD,AAAK,AAAC;AAmBN,AAAM,mBAAC,MAAM,WAAe,QAAC,AAAG,IAAC,CAC/B,gBAAU,WAAC,AAAI,KAAC,AAAI,KAAC,AAAe,iBAAE,AAAO,UAAG,AAAW,AAAC,cAAE,AAAgB,AAAC,kBAC5E,AAAI,KAAC,AAAE,MAAI,AAAI,KAAC,AAAuB,wBAAC,AAAE,AAAC,AAAC,MAC/C,gBAAU,WAAC,AAAI,KAAC,AAAI,KAAC,AAAe,iBAAE,AAAO,UAAG,AAAG,MAAG,AAAO,UAAG,AAAa,AAAC,gBAAE,AAAI,KAAC,AAAI,KAAC,AAAe,iBAAE,AAAO,UAAG,AAAG,MAAG,AAAO,UAAG,AAAU,aAAG,AAAa,AAAC,AAAC,gBAC9J,AAAI,KAAC,AAAE,MAAI,AAAI,KAAC,AAAuB,wBAAC,AAAE,AAAC,AAAC,AAChD,AAAC,AACJ,AAAC;;;AAEa,AAAI,SAAC,AAAY,SAAE,AAAqB;;AACpD,kBAAM,AAAK,QAA6D,AAAO,QAAC,AAAY,AAAC,cAAC,AAAI,AAAE,OAAC,AAAK;AAE1G,kBAAM,AAAQ,SAAC,AAAO,QAAC,AAAe,AAAC;AACvC,AAAM,oCAAsB,QAAC,AAAS,UAAC,AAAK,AAAC,cAAQ,AAAM,OAAC,AAAO,SAAE;AACnE,AAAG,qBAAE,AAAO,QAAC,AAAG;AAChB,AAAO,yBAAE,AAAO,QAAC,AAAY;AAC7B,AAAG,qBAAE,AAAO,QAAC,AAAe;AAC5B,AAAQ,0BAAE,AAAO;AACjB,AAAO,yBAAE,AAAa;AACtB,AAAqB,uCAAE,AAAK;AAC5B,AAAM,wBAAE;AACN,AAAG,gCAAS,AAAM,OAAC;AACjB,AAAK,+BAAE,AAAO,QAAC,AAAI;AACnB,AAAO,iCAAE,AAAO,QAAC,AAAO;AACxB,AAAI,8BAAE,AAAO,QAAC,AAAS;AACvB,AAAS,mCAAE,AAAO,QAAC,AAAO,AAC3B;qBALI,AAAM,EAKR,AAAI,KAAC,AAAiB,AAAC,AAC3B,AACF,AAAC,AAAC,AACL,AAAC,AACH,AAAC;;aAjBiD,AAAM,CAAvC,CAAN;;;;AArIX;kBAsJC","sourcesContent":["import { downloadCertificate } from \"./codeSign\"\nimport { Promise as BluebirdPromise } from \"bluebird\"\nimport { tsAwaiter } from \"./awaiter\"\nimport { PlatformPackager, BuildInfo } from \"./platformPackager\"\nimport * as path from \"path\"\nimport { Stats } from \"fs\"\nimport { log } from \"./util\"\nimport { deleteFile, stat, renameFile } from \"./promisifed-fs\"\nimport * as fse from \"fs-extra\"\n\nconst __awaiter = tsAwaiter\nArray.isArray(__awaiter)\n\nconst emptyDir = BluebirdPromise.promisify(fse.emptyDir)\n\nexport default class WinPackager extends PlatformPackager<any> {\n  certFilePromise: Promise<string>\n  isNsis: boolean\n\n  constructor(info: BuildInfo, cleanupTasks: Array<() => Promise<any>>) {\n    super(info)\n\n    // we are not going to support build both nsis and squirrel\n    this.isNsis = this.options.target != null && this.options.target.includes(\"nsis\")\n    if (this.isNsis) {\n      // it is not an optimization, win.js cannot be runned in highly concurrent environment and we get\n      // \"Error: EBUSY: resource busy or locked, unlink 'C:\\Users\\appveyor\\AppData\\Local\\Temp\\1\\icon.ico'\"\n      // on appveyor (well, yes, it is a Windows bug)\n      // Because NSIS support will be dropped some day, correct solution is not implemented\n      const iconPath = this.customDistOptions == null ? null : this.customDistOptions.icon\n      require(\"../lib/win\").copyAssetsToTmpFolder(iconPath || path.join(this.projectDir, \"build\", \"icon.ico\"))\n    }\n\n    // https://developer.mozilla.org/en-US/docs/Signing_an_executable_with_Authenticode\n    // https://github.com/Squirrel/Squirrel.Windows/pull/505\n    if (this.options.cscLink != null && this.options.cscKeyPassword != null && process.platform !== \"darwin\") {\n      this.certFilePromise = downloadCertificate(this.options.cscLink)\n        .then(path => {\n          cleanupTasks.push(() => deleteFile(path, true))\n          return path\n        })\n    }\n    else {\n      this.certFilePromise = BluebirdPromise.resolve(null)\n    }\n  }\n\n  getBuildConfigurationKey() {\n    return \"win\"\n  }\n\n  pack(platform: string, outDir: string, appOutDir: string): Promise<any> {\n    if (this.options.dist && !this.isNsis) {\n      const installerOut = this.computeDistOut(outDir)\n      log(\"Removing %s\", installerOut)\n      return BluebirdPromise.all([\n        super.pack(platform, outDir, appOutDir),\n        emptyDir(installerOut)\n      ])\n    }\n    else {\n      return super.pack(platform, outDir, appOutDir)\n    }\n  }\n\n  private computeDistOut(outDir: string): string {\n    return path.join(outDir, (this.isNsis ? \"nsis\" : \"win\") + (this.currentArch === \"x64\" ? \"-x64\" : \"\"))\n  }\n\n  async packageInDistributableFormat(outDir: string, appOutDir: string): Promise<any> {\n    let iconUrl = this.metadata.build.iconUrl\n    if (!iconUrl) {\n      if (this.customDistOptions != null) {\n        iconUrl = this.customDistOptions.iconUrl\n      }\n      if (!iconUrl) {\n        if (this.info.repositoryInfo != null) {\n          const info = await this.info.repositoryInfo.getInfo(this)\n          if (info != null) {\n            iconUrl = `https://raw.githubusercontent.com/${info.user}/${info.project}/master/build/icon.ico`\n          }\n        }\n\n        if (!iconUrl) {\n          throw new Error(\"iconUrl is not specified, please see https://github.com/develar/electron-complete-builder#in-short\")\n        }\n      }\n    }\n\n    const certificateFile = await this.certFilePromise\n    const version = this.metadata.version\n    const installerOutDir = this.computeDistOut(outDir)\n    const appName = this.metadata.name\n    const archSuffix = this.currentArch === \"x64\" ? \"-x64\" : \"\"\n    const installerExePath = path.join(installerOutDir, appName + \"Setup-\" + version + archSuffix + \".exe\")\n    const options = Object.assign({\n      name: this.metadata.name,\n      appDirectory: appOutDir,\n      outputDirectory: installerOutDir,\n      productName: appName,\n      version: version,\n      description: this.metadata.description,\n      authors: this.metadata.author,\n      iconUrl: iconUrl,\n      setupIcon: path.join(this.projectDir, \"build\", \"icon.ico\"),\n      certificateFile: certificateFile,\n      certificatePassword: this.options.cscKeyPassword,\n    }, this.customDistOptions)\n\n    if (this.isNsis) {\n      return await this.nsis(options, installerExePath)\n    }\n\n    try {\n      const build = <(options: any, callback: (error: Error) => void) => void>require(\"electron-winstaller-temp-fork\").build\n      await BluebirdPromise.promisify(build)(options)\n    }\n    catch (e) {\n      if (!e.message.includes(\"Unable to set icon\")) {\n        throw e\n      }\n      else {\n        let fileInfo: Stats\n        try {\n          fileInfo = await stat(options.setupIcon)\n        }\n        catch (e) {\n          throw new Error(\"Please specify correct setupIcon, file \" + options.setupIcon + \" not found\")\n        }\n\n        if (fileInfo.isDirectory()) {\n          throw new Error(\"Please specify correct setupIcon, \" + options.setupIcon + \" is a directory\")\n        }\n      }\n    }\n\n    return await BluebirdPromise.all([\n      renameFile(path.join(installerOutDir, appName + \"Setup.exe\"), installerExePath)\n        .then(it => this.dispatchArtifactCreated(it)),\n      renameFile(path.join(installerOutDir, appName + \"-\" + version + \"-full.nupkg\"), path.join(installerOutDir, appName + \"-\" + version + archSuffix + \"-full.nupkg\"))\n        .then(it => this.dispatchArtifactCreated(it))\n    ])\n  }\n\n  private async nsis(options: any, installerFile: string) {\n    const build = <(options: any, callback: (error: Error) => void) => void>require(\"../lib/win\").init().build\n    // nsis cannot create dir\n    await emptyDir(options.outputDirectory)\n    return await BluebirdPromise.promisify(build)(Object.assign(options, {\n      log: console.log,\n      appPath: options.appDirectory,\n      out: options.outputDirectory,\n      platform: \"win32\",\n      outFile: installerFile,\n      copyAssetsToTmpFolder: false,\n      config: {\n        win: Object.assign({\n          title: options.name,\n          version: options.version,\n          icon: options.setupIcon,\n          publisher: options.authors\n        }, this.customDistOptions)\n      }\n    }))\n  }\n}"]}